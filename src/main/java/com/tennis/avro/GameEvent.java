/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.tennis.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Event representing a tennis game action */
@org.apache.avro.specific.AvroGenerated
public class GameEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8564868733357534139L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GameEvent\",\"namespace\":\"com.tennis.avro\",\"doc\":\"Event representing a tennis game action\",\"fields\":[{\"name\":\"gameId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Unique identifier for the game\"},{\"name\":\"eventType\",\"type\":{\"type\":\"enum\",\"name\":\"EventType\",\"doc\":\"Type of event that occurred\",\"symbols\":[\"POINT_SCORED\",\"GAME_FINISHED\"]},\"doc\":\"The type of event\"},{\"name\":\"player\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Player who scored the point (null for game finished events)\",\"default\":null},{\"name\":\"playerAScore\",\"type\":\"int\",\"doc\":\"Current score for Player A\"},{\"name\":\"playerBScore\",\"type\":\"int\",\"doc\":\"Current score for Player B\"},{\"name\":\"displayScore\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Human-readable score display\"},{\"name\":\"isFinished\",\"type\":\"boolean\",\"doc\":\"Whether the game has finished\"},{\"name\":\"winner\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Winner of the game (null if not finished)\",\"default\":null},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"Event timestamp in milliseconds since epoch\"},{\"name\":\"metadata\",\"type\":{\"type\":\"record\",\"name\":\"EventMetadata\",\"fields\":[{\"name\":\"version\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Schema version\",\"default\":\"1.0.0\"},{\"name\":\"source\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Source system\",\"default\":\"tennis-scoring-system\"}]},\"doc\":\"Event metadata\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<GameEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<GameEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<GameEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<GameEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<GameEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this GameEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a GameEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a GameEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static GameEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Unique identifier for the game */
  private java.lang.String gameId;
  /** The type of event */
  private com.tennis.avro.EventType eventType;
  /** Player who scored the point (null for game finished events) */
  private java.lang.String player;
  /** Current score for Player A */
  private int playerAScore;
  /** Current score for Player B */
  private int playerBScore;
  /** Human-readable score display */
  private java.lang.String displayScore;
  /** Whether the game has finished */
  private boolean isFinished;
  /** Winner of the game (null if not finished) */
  private java.lang.String winner;
  /** Event timestamp in milliseconds since epoch */
  private long timestamp;
  /** Event metadata */
  private com.tennis.avro.EventMetadata metadata;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public GameEvent() {}

  /**
   * All-args constructor.
   * @param gameId Unique identifier for the game
   * @param eventType The type of event
   * @param player Player who scored the point (null for game finished events)
   * @param playerAScore Current score for Player A
   * @param playerBScore Current score for Player B
   * @param displayScore Human-readable score display
   * @param isFinished Whether the game has finished
   * @param winner Winner of the game (null if not finished)
   * @param timestamp Event timestamp in milliseconds since epoch
   * @param metadata Event metadata
   */
  public GameEvent(java.lang.String gameId, com.tennis.avro.EventType eventType, java.lang.String player, java.lang.Integer playerAScore, java.lang.Integer playerBScore, java.lang.String displayScore, java.lang.Boolean isFinished, java.lang.String winner, java.lang.Long timestamp, com.tennis.avro.EventMetadata metadata) {
    this.gameId = gameId;
    this.eventType = eventType;
    this.player = player;
    this.playerAScore = playerAScore;
    this.playerBScore = playerBScore;
    this.displayScore = displayScore;
    this.isFinished = isFinished;
    this.winner = winner;
    this.timestamp = timestamp;
    this.metadata = metadata;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return gameId;
    case 1: return eventType;
    case 2: return player;
    case 3: return playerAScore;
    case 4: return playerBScore;
    case 5: return displayScore;
    case 6: return isFinished;
    case 7: return winner;
    case 8: return timestamp;
    case 9: return metadata;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: gameId = value$ != null ? value$.toString() : null; break;
    case 1: eventType = (com.tennis.avro.EventType)value$; break;
    case 2: player = value$ != null ? value$.toString() : null; break;
    case 3: playerAScore = (java.lang.Integer)value$; break;
    case 4: playerBScore = (java.lang.Integer)value$; break;
    case 5: displayScore = value$ != null ? value$.toString() : null; break;
    case 6: isFinished = (java.lang.Boolean)value$; break;
    case 7: winner = value$ != null ? value$.toString() : null; break;
    case 8: timestamp = (java.lang.Long)value$; break;
    case 9: metadata = (com.tennis.avro.EventMetadata)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'gameId' field.
   * @return Unique identifier for the game
   */
  public java.lang.String getGameId() {
    return gameId;
  }


  /**
   * Sets the value of the 'gameId' field.
   * Unique identifier for the game
   * @param value the value to set.
   */
  public void setGameId(java.lang.String value) {
    this.gameId = value;
  }

  /**
   * Gets the value of the 'eventType' field.
   * @return The type of event
   */
  public com.tennis.avro.EventType getEventType() {
    return eventType;
  }


  /**
   * Sets the value of the 'eventType' field.
   * The type of event
   * @param value the value to set.
   */
  public void setEventType(com.tennis.avro.EventType value) {
    this.eventType = value;
  }

  /**
   * Gets the value of the 'player' field.
   * @return Player who scored the point (null for game finished events)
   */
  public java.lang.String getPlayer() {
    return player;
  }


  /**
   * Sets the value of the 'player' field.
   * Player who scored the point (null for game finished events)
   * @param value the value to set.
   */
  public void setPlayer(java.lang.String value) {
    this.player = value;
  }

  /**
   * Gets the value of the 'playerAScore' field.
   * @return Current score for Player A
   */
  public int getPlayerAScore() {
    return playerAScore;
  }


  /**
   * Sets the value of the 'playerAScore' field.
   * Current score for Player A
   * @param value the value to set.
   */
  public void setPlayerAScore(int value) {
    this.playerAScore = value;
  }

  /**
   * Gets the value of the 'playerBScore' field.
   * @return Current score for Player B
   */
  public int getPlayerBScore() {
    return playerBScore;
  }


  /**
   * Sets the value of the 'playerBScore' field.
   * Current score for Player B
   * @param value the value to set.
   */
  public void setPlayerBScore(int value) {
    this.playerBScore = value;
  }

  /**
   * Gets the value of the 'displayScore' field.
   * @return Human-readable score display
   */
  public java.lang.String getDisplayScore() {
    return displayScore;
  }


  /**
   * Sets the value of the 'displayScore' field.
   * Human-readable score display
   * @param value the value to set.
   */
  public void setDisplayScore(java.lang.String value) {
    this.displayScore = value;
  }

  /**
   * Gets the value of the 'isFinished' field.
   * @return Whether the game has finished
   */
  public boolean getIsFinished() {
    return isFinished;
  }


  /**
   * Sets the value of the 'isFinished' field.
   * Whether the game has finished
   * @param value the value to set.
   */
  public void setIsFinished(boolean value) {
    this.isFinished = value;
  }

  /**
   * Gets the value of the 'winner' field.
   * @return Winner of the game (null if not finished)
   */
  public java.lang.String getWinner() {
    return winner;
  }


  /**
   * Sets the value of the 'winner' field.
   * Winner of the game (null if not finished)
   * @param value the value to set.
   */
  public void setWinner(java.lang.String value) {
    this.winner = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return Event timestamp in milliseconds since epoch
   */
  public long getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * Event timestamp in milliseconds since epoch
   * @param value the value to set.
   */
  public void setTimestamp(long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'metadata' field.
   * @return Event metadata
   */
  public com.tennis.avro.EventMetadata getMetadata() {
    return metadata;
  }


  /**
   * Sets the value of the 'metadata' field.
   * Event metadata
   * @param value the value to set.
   */
  public void setMetadata(com.tennis.avro.EventMetadata value) {
    this.metadata = value;
  }

  /**
   * Creates a new GameEvent RecordBuilder.
   * @return A new GameEvent RecordBuilder
   */
  public static com.tennis.avro.GameEvent.Builder newBuilder() {
    return new com.tennis.avro.GameEvent.Builder();
  }

  /**
   * Creates a new GameEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new GameEvent RecordBuilder
   */
  public static com.tennis.avro.GameEvent.Builder newBuilder(com.tennis.avro.GameEvent.Builder other) {
    if (other == null) {
      return new com.tennis.avro.GameEvent.Builder();
    } else {
      return new com.tennis.avro.GameEvent.Builder(other);
    }
  }

  /**
   * Creates a new GameEvent RecordBuilder by copying an existing GameEvent instance.
   * @param other The existing instance to copy.
   * @return A new GameEvent RecordBuilder
   */
  public static com.tennis.avro.GameEvent.Builder newBuilder(com.tennis.avro.GameEvent other) {
    if (other == null) {
      return new com.tennis.avro.GameEvent.Builder();
    } else {
      return new com.tennis.avro.GameEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for GameEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GameEvent>
    implements org.apache.avro.data.RecordBuilder<GameEvent> {

    /** Unique identifier for the game */
    private java.lang.String gameId;
    /** The type of event */
    private com.tennis.avro.EventType eventType;
    /** Player who scored the point (null for game finished events) */
    private java.lang.String player;
    /** Current score for Player A */
    private int playerAScore;
    /** Current score for Player B */
    private int playerBScore;
    /** Human-readable score display */
    private java.lang.String displayScore;
    /** Whether the game has finished */
    private boolean isFinished;
    /** Winner of the game (null if not finished) */
    private java.lang.String winner;
    /** Event timestamp in milliseconds since epoch */
    private long timestamp;
    /** Event metadata */
    private com.tennis.avro.EventMetadata metadata;
    private com.tennis.avro.EventMetadata.Builder metadataBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.tennis.avro.GameEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.gameId)) {
        this.gameId = data().deepCopy(fields()[0].schema(), other.gameId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.eventType)) {
        this.eventType = data().deepCopy(fields()[1].schema(), other.eventType);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.player)) {
        this.player = data().deepCopy(fields()[2].schema(), other.player);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.playerAScore)) {
        this.playerAScore = data().deepCopy(fields()[3].schema(), other.playerAScore);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.playerBScore)) {
        this.playerBScore = data().deepCopy(fields()[4].schema(), other.playerBScore);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.displayScore)) {
        this.displayScore = data().deepCopy(fields()[5].schema(), other.displayScore);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.isFinished)) {
        this.isFinished = data().deepCopy(fields()[6].schema(), other.isFinished);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.winner)) {
        this.winner = data().deepCopy(fields()[7].schema(), other.winner);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[8].schema(), other.timestamp);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.metadata)) {
        this.metadata = data().deepCopy(fields()[9].schema(), other.metadata);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (other.hasMetadataBuilder()) {
        this.metadataBuilder = com.tennis.avro.EventMetadata.newBuilder(other.getMetadataBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing GameEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.tennis.avro.GameEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.gameId)) {
        this.gameId = data().deepCopy(fields()[0].schema(), other.gameId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.eventType)) {
        this.eventType = data().deepCopy(fields()[1].schema(), other.eventType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.player)) {
        this.player = data().deepCopy(fields()[2].schema(), other.player);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.playerAScore)) {
        this.playerAScore = data().deepCopy(fields()[3].schema(), other.playerAScore);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.playerBScore)) {
        this.playerBScore = data().deepCopy(fields()[4].schema(), other.playerBScore);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.displayScore)) {
        this.displayScore = data().deepCopy(fields()[5].schema(), other.displayScore);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.isFinished)) {
        this.isFinished = data().deepCopy(fields()[6].schema(), other.isFinished);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.winner)) {
        this.winner = data().deepCopy(fields()[7].schema(), other.winner);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[8].schema(), other.timestamp);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.metadata)) {
        this.metadata = data().deepCopy(fields()[9].schema(), other.metadata);
        fieldSetFlags()[9] = true;
      }
      this.metadataBuilder = null;
    }

    /**
      * Gets the value of the 'gameId' field.
      * Unique identifier for the game
      * @return The value.
      */
    public java.lang.String getGameId() {
      return gameId;
    }


    /**
      * Sets the value of the 'gameId' field.
      * Unique identifier for the game
      * @param value The value of 'gameId'.
      * @return This builder.
      */
    public com.tennis.avro.GameEvent.Builder setGameId(java.lang.String value) {
      validate(fields()[0], value);
      this.gameId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'gameId' field has been set.
      * Unique identifier for the game
      * @return True if the 'gameId' field has been set, false otherwise.
      */
    public boolean hasGameId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'gameId' field.
      * Unique identifier for the game
      * @return This builder.
      */
    public com.tennis.avro.GameEvent.Builder clearGameId() {
      gameId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventType' field.
      * The type of event
      * @return The value.
      */
    public com.tennis.avro.EventType getEventType() {
      return eventType;
    }


    /**
      * Sets the value of the 'eventType' field.
      * The type of event
      * @param value The value of 'eventType'.
      * @return This builder.
      */
    public com.tennis.avro.GameEvent.Builder setEventType(com.tennis.avro.EventType value) {
      validate(fields()[1], value);
      this.eventType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'eventType' field has been set.
      * The type of event
      * @return True if the 'eventType' field has been set, false otherwise.
      */
    public boolean hasEventType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'eventType' field.
      * The type of event
      * @return This builder.
      */
    public com.tennis.avro.GameEvent.Builder clearEventType() {
      eventType = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'player' field.
      * Player who scored the point (null for game finished events)
      * @return The value.
      */
    public java.lang.String getPlayer() {
      return player;
    }


    /**
      * Sets the value of the 'player' field.
      * Player who scored the point (null for game finished events)
      * @param value The value of 'player'.
      * @return This builder.
      */
    public com.tennis.avro.GameEvent.Builder setPlayer(java.lang.String value) {
      validate(fields()[2], value);
      this.player = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'player' field has been set.
      * Player who scored the point (null for game finished events)
      * @return True if the 'player' field has been set, false otherwise.
      */
    public boolean hasPlayer() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'player' field.
      * Player who scored the point (null for game finished events)
      * @return This builder.
      */
    public com.tennis.avro.GameEvent.Builder clearPlayer() {
      player = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'playerAScore' field.
      * Current score for Player A
      * @return The value.
      */
    public int getPlayerAScore() {
      return playerAScore;
    }


    /**
      * Sets the value of the 'playerAScore' field.
      * Current score for Player A
      * @param value The value of 'playerAScore'.
      * @return This builder.
      */
    public com.tennis.avro.GameEvent.Builder setPlayerAScore(int value) {
      validate(fields()[3], value);
      this.playerAScore = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'playerAScore' field has been set.
      * Current score for Player A
      * @return True if the 'playerAScore' field has been set, false otherwise.
      */
    public boolean hasPlayerAScore() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'playerAScore' field.
      * Current score for Player A
      * @return This builder.
      */
    public com.tennis.avro.GameEvent.Builder clearPlayerAScore() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'playerBScore' field.
      * Current score for Player B
      * @return The value.
      */
    public int getPlayerBScore() {
      return playerBScore;
    }


    /**
      * Sets the value of the 'playerBScore' field.
      * Current score for Player B
      * @param value The value of 'playerBScore'.
      * @return This builder.
      */
    public com.tennis.avro.GameEvent.Builder setPlayerBScore(int value) {
      validate(fields()[4], value);
      this.playerBScore = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'playerBScore' field has been set.
      * Current score for Player B
      * @return True if the 'playerBScore' field has been set, false otherwise.
      */
    public boolean hasPlayerBScore() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'playerBScore' field.
      * Current score for Player B
      * @return This builder.
      */
    public com.tennis.avro.GameEvent.Builder clearPlayerBScore() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'displayScore' field.
      * Human-readable score display
      * @return The value.
      */
    public java.lang.String getDisplayScore() {
      return displayScore;
    }


    /**
      * Sets the value of the 'displayScore' field.
      * Human-readable score display
      * @param value The value of 'displayScore'.
      * @return This builder.
      */
    public com.tennis.avro.GameEvent.Builder setDisplayScore(java.lang.String value) {
      validate(fields()[5], value);
      this.displayScore = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'displayScore' field has been set.
      * Human-readable score display
      * @return True if the 'displayScore' field has been set, false otherwise.
      */
    public boolean hasDisplayScore() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'displayScore' field.
      * Human-readable score display
      * @return This builder.
      */
    public com.tennis.avro.GameEvent.Builder clearDisplayScore() {
      displayScore = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'isFinished' field.
      * Whether the game has finished
      * @return The value.
      */
    public boolean getIsFinished() {
      return isFinished;
    }


    /**
      * Sets the value of the 'isFinished' field.
      * Whether the game has finished
      * @param value The value of 'isFinished'.
      * @return This builder.
      */
    public com.tennis.avro.GameEvent.Builder setIsFinished(boolean value) {
      validate(fields()[6], value);
      this.isFinished = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'isFinished' field has been set.
      * Whether the game has finished
      * @return True if the 'isFinished' field has been set, false otherwise.
      */
    public boolean hasIsFinished() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'isFinished' field.
      * Whether the game has finished
      * @return This builder.
      */
    public com.tennis.avro.GameEvent.Builder clearIsFinished() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'winner' field.
      * Winner of the game (null if not finished)
      * @return The value.
      */
    public java.lang.String getWinner() {
      return winner;
    }


    /**
      * Sets the value of the 'winner' field.
      * Winner of the game (null if not finished)
      * @param value The value of 'winner'.
      * @return This builder.
      */
    public com.tennis.avro.GameEvent.Builder setWinner(java.lang.String value) {
      validate(fields()[7], value);
      this.winner = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'winner' field has been set.
      * Winner of the game (null if not finished)
      * @return True if the 'winner' field has been set, false otherwise.
      */
    public boolean hasWinner() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'winner' field.
      * Winner of the game (null if not finished)
      * @return This builder.
      */
    public com.tennis.avro.GameEvent.Builder clearWinner() {
      winner = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * Event timestamp in milliseconds since epoch
      * @return The value.
      */
    public long getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * Event timestamp in milliseconds since epoch
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.tennis.avro.GameEvent.Builder setTimestamp(long value) {
      validate(fields()[8], value);
      this.timestamp = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * Event timestamp in milliseconds since epoch
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * Event timestamp in milliseconds since epoch
      * @return This builder.
      */
    public com.tennis.avro.GameEvent.Builder clearTimestamp() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'metadata' field.
      * Event metadata
      * @return The value.
      */
    public com.tennis.avro.EventMetadata getMetadata() {
      return metadata;
    }


    /**
      * Sets the value of the 'metadata' field.
      * Event metadata
      * @param value The value of 'metadata'.
      * @return This builder.
      */
    public com.tennis.avro.GameEvent.Builder setMetadata(com.tennis.avro.EventMetadata value) {
      validate(fields()[9], value);
      this.metadataBuilder = null;
      this.metadata = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'metadata' field has been set.
      * Event metadata
      * @return True if the 'metadata' field has been set, false otherwise.
      */
    public boolean hasMetadata() {
      return fieldSetFlags()[9];
    }

    /**
     * Gets the Builder instance for the 'metadata' field and creates one if it doesn't exist yet.
     * Event metadata
     * @return This builder.
     */
    public com.tennis.avro.EventMetadata.Builder getMetadataBuilder() {
      if (metadataBuilder == null) {
        if (hasMetadata()) {
          setMetadataBuilder(com.tennis.avro.EventMetadata.newBuilder(metadata));
        } else {
          setMetadataBuilder(com.tennis.avro.EventMetadata.newBuilder());
        }
      }
      return metadataBuilder;
    }

    /**
     * Sets the Builder instance for the 'metadata' field
     * Event metadata
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.tennis.avro.GameEvent.Builder setMetadataBuilder(com.tennis.avro.EventMetadata.Builder value) {
      clearMetadata();
      metadataBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'metadata' field has an active Builder instance
     * Event metadata
     * @return True if the 'metadata' field has an active Builder instance
     */
    public boolean hasMetadataBuilder() {
      return metadataBuilder != null;
    }

    /**
      * Clears the value of the 'metadata' field.
      * Event metadata
      * @return This builder.
      */
    public com.tennis.avro.GameEvent.Builder clearMetadata() {
      metadata = null;
      metadataBuilder = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public GameEvent build() {
      try {
        GameEvent record = new GameEvent();
        record.gameId = fieldSetFlags()[0] ? this.gameId : (java.lang.String) defaultValue(fields()[0]);
        record.eventType = fieldSetFlags()[1] ? this.eventType : (com.tennis.avro.EventType) defaultValue(fields()[1]);
        record.player = fieldSetFlags()[2] ? this.player : (java.lang.String) defaultValue(fields()[2]);
        record.playerAScore = fieldSetFlags()[3] ? this.playerAScore : (java.lang.Integer) defaultValue(fields()[3]);
        record.playerBScore = fieldSetFlags()[4] ? this.playerBScore : (java.lang.Integer) defaultValue(fields()[4]);
        record.displayScore = fieldSetFlags()[5] ? this.displayScore : (java.lang.String) defaultValue(fields()[5]);
        record.isFinished = fieldSetFlags()[6] ? this.isFinished : (java.lang.Boolean) defaultValue(fields()[6]);
        record.winner = fieldSetFlags()[7] ? this.winner : (java.lang.String) defaultValue(fields()[7]);
        record.timestamp = fieldSetFlags()[8] ? this.timestamp : (java.lang.Long) defaultValue(fields()[8]);
        if (metadataBuilder != null) {
          try {
            record.metadata = this.metadataBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("metadata"));
            throw e;
          }
        } else {
          record.metadata = fieldSetFlags()[9] ? this.metadata : (com.tennis.avro.EventMetadata) defaultValue(fields()[9]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<GameEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<GameEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<GameEvent>
    READER$ = (org.apache.avro.io.DatumReader<GameEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.gameId);

    out.writeEnum(this.eventType.ordinal());

    if (this.player == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.player);
    }

    out.writeInt(this.playerAScore);

    out.writeInt(this.playerBScore);

    out.writeString(this.displayScore);

    out.writeBoolean(this.isFinished);

    if (this.winner == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.winner);
    }

    out.writeLong(this.timestamp);

    this.metadata.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.gameId = in.readString();

      this.eventType = com.tennis.avro.EventType.values()[in.readEnum()];

      if (in.readIndex() != 1) {
        in.readNull();
        this.player = null;
      } else {
        this.player = in.readString();
      }

      this.playerAScore = in.readInt();

      this.playerBScore = in.readInt();

      this.displayScore = in.readString();

      this.isFinished = in.readBoolean();

      if (in.readIndex() != 1) {
        in.readNull();
        this.winner = null;
      } else {
        this.winner = in.readString();
      }

      this.timestamp = in.readLong();

      if (this.metadata == null) {
        this.metadata = new com.tennis.avro.EventMetadata();
      }
      this.metadata.customDecode(in);

    } else {
      for (int i = 0; i < 10; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.gameId = in.readString();
          break;

        case 1:
          this.eventType = com.tennis.avro.EventType.values()[in.readEnum()];
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.player = null;
          } else {
            this.player = in.readString();
          }
          break;

        case 3:
          this.playerAScore = in.readInt();
          break;

        case 4:
          this.playerBScore = in.readInt();
          break;

        case 5:
          this.displayScore = in.readString();
          break;

        case 6:
          this.isFinished = in.readBoolean();
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.winner = null;
          } else {
            this.winner = in.readString();
          }
          break;

        case 8:
          this.timestamp = in.readLong();
          break;

        case 9:
          if (this.metadata == null) {
            this.metadata = new com.tennis.avro.EventMetadata();
          }
          this.metadata.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










